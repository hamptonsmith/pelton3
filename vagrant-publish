#!/usr/bin/env zx

const token = process.env.VAGRANT_CLOUD_ACCESS_TOKEN;
if (!token) {
    echo('$VAGRANT_CLOUD_ACCESS_TOKEN must be set');
    process.exit(1);
}

function http(url, opts = {}) {
    opts.headers = {
        Accept: 'application/json',
        Authorization: `Bearer ${token}`
    };

    if (opts.method && opts.method !== 'GET') {
        opts.headers['Content-Type'] = 'application/json';
        opts.body = JSON.stringify(opts.body);
    }

    return fetch(url, opts);
}

function isOk(response) {
    return response.ok;
}

async function to200OkJson(response) {
    if (!response.ok) {
        const e = new Error(response.status + ' - ' + response.statusText);
        e.httpError = true;
        throw e;
    }

    return await response.json();
}

const versionNumber =
        JSON.parse(fs.readFileSync('package.json', 'utf8')).version;

const boxname = process.env.BOX_NAME || 'pelton22';
const username = process.env.USER_NAME || 'shieldsbetter';

const api = 'https://vagrantcloud.com/api/v1';
const boxResource = `${api}/box/${username}/${boxname}`;
const versionResource = `${boxResource}/version/${versionNumber}`;
const providerResource = `${versionResource}/provider/virtualbox`;

if (!await http(versionResource).then(isOk)) {
    await http(`${boxResource}/versions`, {
        method: 'POST',
        body: {
            version: { version: versionNumber }
        }
    }).then(to200OkJson);
}

if (!await http(`${versionResource}/provider/virtualbox`).then(isOk)) {
    await http(`${versionResource}/providers`, {
        method: 'POST',
        body: {
            provider: { name: 'virtualbox' }
        }
    }).then(to200OkJson);
}

// For the moment, this seems to be the "right" way to determine if there's
// already been an upload.
const providerDownloadUrl =
        (await http(providerResource).then(to200OkJson)).download_url;

if (!await http(providerDownloadUrl).then(isOk)) {
    const boxFilename = `${boxname}-${versionNumber}.box`;
    await $`vagrant destroy --force`;

    process.env.PELTON_VAGRANT_PACKAGING = versionNumber;
    await $`vagrant up`;

    await $`rm ${boxFilename} || true`;
    await $`vagrant package --out ${boxFilename}`;

    const boxUploadUrl =
            (await http(`${providerResource}/upload`).then(to200OkJson))
            .upload_path;

    await $`curl -X PUT --upload-file ${boxFilename} ${boxUploadUrl}`;
}

const versionStatus = (await http(versionResource).then(to200OkJson)).status;

if (versionStatus !== 'active') {
    await http(`${versionResource}/release`, {
        method: 'PUT'
    });
}
